schema {
  query: Query
  mutation: Mutation
}

input VoidRequest {
  void: Boolean
}

type VoidResponse {
  void: Boolean
}

input CreateUserRequest {
  id: String!
  name: String!
}

input GetUserRequest {
  id: String!
}

type GetUserResponse {
  id: String!
  name: String!
}

type PlayerRole {
  playerId: String!
  role: String!
}

type Card {
  id: String!
  name: String!
}

type PlayerCard {
  playerId: String!
  cardId: String!
}

type Round {
  id: String!
  name: String!
  playerCards: [PlayerCard!]!
}

type GameResponse {
  id: String!
  status: String!
  cards: [Card!]!
  players: [PlayerRole!]!
  round: Round
}

input CardRequest {
  id: String!
  name: String!
}

input NewGameRequest {
  gameId: String!
  playerId: String!
  cards: [CardRequest!]!
}

input AddPlayerRequest {
  gameId: String!
  playerId: String!
}

input NewRoundRequest {
  gameId: String!
  playerId: String!
  roundId: String!
  roundName: String!
}

input PlayCardRequest {
  gameId: String!
  playerId: String!
  cardId: String!
}

input EndRoundRequest {
  gameId: String!
  playerId: String!
  resultCardId: String!
}

type Mutation {
  CreateUser(request: CreateUserRequest!): VoidResponse!
  NewGame(request: NewGameRequest!): GameResponse!
  AddPlayer(request: AddPlayerRequest!): GameResponse!
  NewRound(request: NewRoundRequest!): GameResponse!
  PlayCard(request: PlayCardRequest!): GameResponse!
  EndRound(request: EndRoundRequest!): GameResponse!
}

type Query {
  HealthCheck(request: VoidRequest!): VoidResponse!
  GetUser(request: GetUserRequest!): GetUserResponse!
}
