schema {
  query: Query
  mutation: Mutation
}

input VoidRequest {
  void: Boolean
}

type VoidResponse {
  void: Boolean
}

input CreateUserRequest {
  id: String!
  name: String!
}

input GetUserRequest {
  id: String!
}

type GetUserResponse {
  id: String!
  name: String!
}

type HealthCheckResponse {
  isHealthy: Boolean!
}

type PlayerRole {
  playerId: String!
  role: String!
}

type Card {
  id: String!
  name: String!
}

type PlayerCard {
  playerId: String!
  cardId: String!
}

type Round {
  id: String!
  name: String!
  playerCards: [PlayerCard!]!
}

type GameResponse {
  id: String!
  status: String!
  cards: [Card!]!
  players: [PlayerRole!]!
  round: Round
}

input CardRequest {
  id: String!
  name: String!
}

input NewGameEvent {
  gameId: String!
  playerId: String!
  cards: [CardRequest!]!
}

input AddPlayerEvent {
  gameId: String!
  playerId: String!
}

input NewRoundEvent {
  gameId: String!
  playerId: String!
  roundId: String!
  roundName: String!
}

input PlayCardEvent {
  gameId: String!
  playerId: String!
  cardId: String!
}

input EndRoundEvent {
  gameId: String!
  playerId: String!
  resultCardId: String!
}

type Mutation {
  CreateUser(request: CreateUserRequest!): VoidResponse!
  NewGame(request: NewGameEvent!): GameResponse!
  AddPlayer(request: AddPlayerEvent!): GameResponse!
  NewRound(request: NewRoundEvent!): GameResponse!
  SelectCard(request: PlayCardEvent!): GameResponse!
  EndRound(request: EndRoundEvent!): GameResponse!
}

type Query {
  HealthCheck(request: VoidRequest!): HealthCheckResponse!
  GetUser(request: GetUserRequest!): GetUserResponse!
}
