schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

input VoidRequest {
  void: Boolean
}

type VoidResponse {
  void: Boolean
}

type GetUserResponse {
  id: String!
  name: String!
}

type PlayerRole {
  playerId: String!
  role: String!
}

type Card {
  id: String!
  name: String!
}

type PlayerCard {
  playerId: String!
  cardId: String!
}

type Round {
  id: String!
  name: String!
  playerCards: [PlayerCard!]!
}

type GameResponse {
  gameId: String!
  status: String!
  cards: [Card!]!
  players: [PlayerRole!]!
  round: Round
}

input CardRequest {
  id: String!
  name: String!
}

type Mutation {
  CreateUser(id: String!, name: String!): VoidResponse!
  NewGame(gameId: String!, playerId: String! cards: [CardRequest!]!): GameResponse!
  AddPlayer(gameId: String!, playerId: String!): GameResponse!
  NewRound(gameId: String!, playerId: String!, roundId: String!, roundName: String!): GameResponse!
  PlayCard(gameId: String!, playerId: String!, cardId: String!): GameResponse!
  EndRound(gameId: String!, playerId: String!, resultCardId: String!): GameResponse!
}

type Query {
  HealthCheck(request: VoidRequest!): VoidResponse!
  GetUser(id: String!): GetUserResponse!
  GetGame(id: String!): GameResponse!
}

type Subscription {
  OnGame(gameId: String!): GameResponse
  @aws_subscribe(mutations: ["NewGame", "AddPlayer", "NewRound", "PlayCard", "EndRound"])
}